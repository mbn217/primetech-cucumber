package db_tests;

import org.testng.annotations.Test;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DbTestDemo {
    /**
     * a Test to connect to mysql db and run a simple query and print the result
     */
    @Test
    public void testDB(){
        //jdbc:mysql://hostname:port/dbname
        String url = "jdbc:mysql://stack-overflow.cfse9bqqndon.us-east-1.rds.amazonaws.com:3306/CraterDBS?useSSL=false&allowPublicKeyRetrieval=true";
        String user = "root";
        String password = "adminpassword";
        String query = "select * from invoice_items where name like 'Hot %';";
        List<List<String>> rows = new ArrayList<>(); // Outer list to hold all rows

        //1. Create connection
        try {
            /**
             * A Connection object represents a connection with a database.
             * A SQL statement is executed through the Connection object.
             * The Connection object is used to create a Statement object.
             */
            Connection connection = DriverManager.getConnection(url, user, password);
            System.out.println("Connected to database");
            //2. Create statement
            /**
             * A Statement object is used to send SQL statements to the database.
             * The SQL statements can be parameterized (i.e., have dynamic parameters).
             * The Statement interface is a factory of the ResultSet interface.
             *
             */
            Statement statement = connection.createStatement();
            //3. Execute query
            /**
             * A ResultSet object is a table of data representing a database result set,
             * which is usually generated by executing a statement that queries the database.
             * You need to import java.sql.ResultSet class to use this class.
             * It maintains a cursor that points to the current row in the result set.
             * Initially, the cursor is positioned before the first row.
             * The next() method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object,
             * it can be used in a while loop to iterate through the result set.
             * The getXXX() method retrieves the value of a column in the current row.
             * You must specify the column number to retrieve the value of that column.
             *
             */
            ResultSet resultSet = statement.executeQuery(query);
            /**
             * ResultSetMetaData provides metadata about the columns of a ResultSet object.
             * When you execute a query and obtain a ResultSet,
             * ResultSetMetaData can give you detailed information about the structure of the returned data
             * â€”essentially, details about each column in the result set.
             */
            ResultSetMetaData rsmd = resultSet.getMetaData();
            int columnCount = rsmd.getColumnCount();
            for (int i = 1; i <= columnCount; i++) {
                System.out.println("Column Name: " + rsmd.getColumnName(i));
                System.out.println("Column Type: " + rsmd.getColumnTypeName(i));
                System.out.println("Column Display Size: " + rsmd.getColumnDisplaySize(i));
                System.out.println("Is Nullable: " + rsmd.isNullable(i));
                System.out.println("Is Auto Increment: " + rsmd.isAutoIncrement(i));
                System.out.println("-----------");
            }

            /**
             * The next() method moves the cursor to the next row in the ResultSet object.
             * Initially, the cursor is positioned before the first row.
             * The next() method returns false when there are no more rows in the ResultSet object.
             */
//            while(resultSet.next()){
//                //System.out.println(resultSet.getString("name"));
//                //get all columns from the current row and store them in a list
//                for (int i = 1; i <= columnCount; i++) {
//                    list.add(resultSet.getString(i));
//
//                }
//            }

            // Get the column names from the ResultSetMetaData and store them in a list of strings
//            while (resultSet.next()) {
//                List<String> row = new ArrayList<>(); // Inner list for each row
//                for (int i = 1; i <= columnCount; i++) {
//                    row.add(resultSet.getString(i)); // Add each column value to the row
//                }
//                rows.add(row); // Add the row to the outer list
//            }

            //4. Process results




            //5. Close connection
            resultSet.close();
            statement.close();
            connection.close();


        } catch (SQLException e) {
            System.out.println("Failed to connect to database");
            e.printStackTrace();
        }


        System.out.println(rows);


    }

}
